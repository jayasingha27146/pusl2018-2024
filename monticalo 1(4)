import numpy as np
import random
import pandas as pd
import matplotlib.pyplot as plt

# Checking if the dart lands within the circle
def is_hit(x, y):
    return (x**2 + y**2)**0.5 <= 1

# Simulating the dart throws
def simulate_dart_throw(num_darts):
    hits = 0
    for i in range(num_darts):
        x = random.uniform(-1, 1)
        y = random.uniform(-1, 1)
        if is_hit(x, y):
            hits += 1
    prob_hit_circle = hits / num_darts
    return prob_hit_circle

# Accepting multiple values of N for dart throw simulations
n_values = [int(n) for n in input("Enter multiple values of N separated by commas: ").split(',')]

# Running the dart throw simulation for each value of N, repeated 10 times for each experiment
results = []

for num_darts in n_values:
    for _ in range(10):  # Repeating each experiment 10 times
        prob_hit_circle = simulate_dart_throw(num_darts)
        estimate_value_pi = 4 * prob_hit_circle
        results.append({'N': num_darts, 'Pi Estimate': estimate_value_pi, 'True Pi': np.pi})

# Creating a DataFrame from the results
df = pd.DataFrame(results)

# Calculating mean and mode of Pi estimates for each N value
mean_pi_estimate = df.groupby('N')['Pi Estimate'].mean().reset_index()
mode_pi_estimate = df.groupby('N')['Pi Estimate'].agg(lambda x: x.mode().iloc[0]).reset_index()

# Saving the DataFrame to an Excel file named 'carlo1.xlsx'
with pd.ExcelWriter('monticalo1.4.xlsx') as writer:
    mean_pi_estimate.to_excel(writer, sheet_name='Mean_Pi_Estimate', index=False)
    mode_pi_estimate.to_excel(writer, sheet_name='Mode_Pi_Estimate', index=False)
    df.to_excel(writer, sheet_name='RawData', index=False)

# Displaying mean and mode estimated Pi values for each value of N in the terminal
print("Mean Pi Estimates:")
print(mean_pi_estimate)

print("\nMode Pi Estimates:")
print(mode_pi_estimate)

# Generating a line graph of N values against the mean and mode estimated Pi values
plt.figure(figsize=(10, 6))

plt.plot(mean_pi_estimate['N'], mean_pi_estimate['Pi Estimate'], marker='o', linestyle='-', color='b', label='Mean Pi Estimate')
plt.plot(mode_pi_estimate['N'], mode_pi_estimate['Pi Estimate'], marker='s', linestyle='--', color='r', label='Mode Pi Estimate')

plt.xlabel('N')  # Label for x-axis
plt.ylabel('Estimated Pi Value')  # Label for y-axis
plt.title('Mean and Mode Estimated Pi Values vs. N')  # Title for the plot
plt.legend()  # Adding legend to the plot

# Saving the plot as an image file (optional)
plt.savefig('mean_mode_pi_estimation_vs_N_line_plot.png')

# Displaying the plot
plt.show()

# Displaying the confirmation message
print("Results have been saved to 'carlo1.xlsx'")
